"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./lib/mock-data.ts":
/*!**************************!*\
  !*** ./lib/mock-data.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CIDADES: () => (/* binding */ CIDADES),\n/* harmony export */   INTERESSES: () => (/* binding */ INTERESSES),\n/* harmony export */   MOCK_LEADS: () => (/* binding */ MOCK_LEADS),\n/* harmony export */   MockDataManager: () => (/* binding */ MockDataManager),\n/* harmony export */   STATUS_OPTIONS: () => (/* binding */ STATUS_OPTIONS),\n/* harmony export */   USE_MOCK: () => (/* binding */ USE_MOCK),\n/* harmony export */   checkApiHealth: () => (/* binding */ checkApiHealth),\n/* harmony export */   disableMock: () => (/* binding */ disableMock),\n/* harmony export */   enableMock: () => (/* binding */ enableMock),\n/* harmony export */   enableMockData: () => (/* binding */ enableMockData),\n/* harmony export */   forceMockMode: () => (/* binding */ forceMockMode),\n/* harmony export */   generateMockData: () => (/* binding */ generateMockData),\n/* harmony export */   getMockLeadById: () => (/* binding */ getMockLeadById),\n/* harmony export */   getMockLeads: () => (/* binding */ getMockLeads),\n/* harmony export */   mockDataManager: () => (/* binding */ mockDataManager),\n/* harmony export */   testMockSystem: () => (/* binding */ testMockSystem)\n/* harmony export */ });\n// Array simples de dados mockados\nconst MOCK_LEADS = [\n    {\n        id: 1,\n        name: \"Ana Silva\",\n        email: \"ana.silva@email.com\",\n        cellPhone: \"(11) 99999-1234\",\n        product: \"casaprimavera\",\n        interessePrincipal: \"Decora√ß√£o de sala\",\n        field01: \"S√£o Paulo - SP\",\n        field02: \"Quer reformar sala de estar com m√≥veis planejados\",\n        field03: \"NOVO\",\n        field04: \"Or√ßamento at√© R$ 15.000\",\n        field05: \"Urgente\",\n        field06: \"2 meses\",\n        field07: \"Primeiro contato\",\n        createdAt: \"2024-12-15T10:30:00Z\",\n        updatedAt: \"2024-12-15T10:30:00Z\",\n        tenantId: {\n            id: 9\n        }\n    },\n    {\n        id: 2,\n        name: \"Carlos Santos\",\n        email: \"carlos.santos@empresa.com\",\n        cellPhone: \"(21) 98888-5678\",\n        product: \"casaprimavera\",\n        interessePrincipal: \"M√≥veis de escrit√≥rio\",\n        field01: \"Rio de Janeiro - RJ\",\n        field02: \"Precisa mobiliar escrit√≥rio corporativo novo\",\n        field03: \"CONTATO_FEITO\",\n        field04: \"Precisa de or√ßamento\",\n        field05: \"Flex√≠vel\",\n        field06: \"1 meses\",\n        field07: \"Primeiro contato\",\n        createdAt: \"2024-12-14T14:20:00Z\",\n        updatedAt: \"2024-12-15T09:15:00Z\",\n        tenantId: {\n            id: 9\n        }\n    },\n    {\n        id: 3,\n        name: \"Maria Oliveira\",\n        email: \"maria.oliveira@gmail.com\",\n        cellPhone: \"(31) 97777-9012\",\n        product: \"casaprimavera\",\n        interessePrincipal: \"Quarto de casal\",\n        field01: \"Belo Horizonte - MG\",\n        field02: \"Quer decorar quarto principal com m√≥veis planejados\",\n        field03: \"QUALIFICADO\",\n        field04: \"Or√ßamento at√© R$ 12.000\",\n        field05: \"Urgente\",\n        field06: \"3 meses\",\n        field07: \"Cliente recorrente\",\n        createdAt: \"2024-12-13T16:45:00Z\",\n        updatedAt: \"2024-12-15T11:30:00Z\",\n        tenantId: {\n            id: 9\n        }\n    },\n    {\n        id: 4,\n        name: \"Jo√£o Pereira\",\n        email: \"joao.pereira@email.com\",\n        cellPhone: \"(85) 96666-3456\",\n        product: \"casaprimavera\",\n        interessePrincipal: \"Quarto infantil\",\n        field01: \"Fortaleza - CE\",\n        field02: \"Quer decorar quarto dos filhos com m√≥veis tem√°ticos\",\n        field03: \"PROPOSTA\",\n        field04: \"Or√ßamento at√© R$ 8.000\",\n        field05: \"Flex√≠vel\",\n        field06: \"6 meses\",\n        field07: \"Primeiro contato\",\n        createdAt: \"2024-12-12T08:15:00Z\",\n        updatedAt: \"2024-12-14T15:20:00Z\",\n        tenantId: {\n            id: 9\n        }\n    },\n    {\n        id: 5,\n        name: \"Fernanda Costa\",\n        email: \"fernanda.costa@outlook.com\",\n        cellPhone: \"(71) 95555-7890\",\n        product: \"casaprimavera\",\n        interessePrincipal: \"Cozinha planejada\",\n        field01: \"Salvador - BA\",\n        field02: \"Precisa renovar cozinha com m√≥veis modernos\",\n        field03: \"FECHADO\",\n        field04: \"Or√ßamento at√© R$ 25.000\",\n        field05: \"Urgente\",\n        field06: \"1 meses\",\n        field07: \"Cliente recorrente\",\n        createdAt: \"2024-12-11T12:00:00Z\",\n        updatedAt: \"2024-12-15T08:45:00Z\",\n        tenantId: {\n            id: 9\n        }\n    },\n    {\n        id: 6,\n        name: \"Ricardo Lima\",\n        email: \"ricardo.lima@empresa.com\",\n        cellPhone: \"(61) 94444-2468\",\n        product: \"casaprimavera\",\n        interessePrincipal: \"Decora√ß√£o completa\",\n        field01: \"Bras√≠lia - DF\",\n        field02: \"Quer decorar casa inteira, conhecer cat√°logo completo\",\n        field03: \"QUALIFICADO_OP\",\n        field04: \"Or√ßamento alto dispon√≠vel\",\n        field05: \"Flex√≠vel\",\n        field06: \"4 meses\",\n        field07: \"Primeiro contato\",\n        createdAt: \"2024-12-10T09:30:00Z\",\n        updatedAt: \"2024-12-14T16:10:00Z\",\n        tenantId: {\n            id: 9\n        }\n    },\n    {\n        id: 7,\n        name: \"Juliana Ferreira\",\n        email: \"juliana.ferreira@gmail.com\",\n        cellPhone: \"(41) 93333-1357\",\n        product: \"casaprimavera\",\n        interessePrincipal: \"√Årea externa\",\n        field01: \"Curitiba - PR\",\n        field02: \"Interessada em m√≥veis para varanda e jardim\",\n        field03: \"N√ÉO_QUALIFICADO\",\n        field04: \"Or√ßamento muito baixo\",\n        field05: \"Flex√≠vel\",\n        field06: \"8 meses\",\n        field07: \"Primeiro contato\",\n        createdAt: \"2024-12-09T15:20:00Z\",\n        updatedAt: \"2024-12-13T10:15:00Z\",\n        tenantId: {\n            id: 9\n        }\n    },\n    {\n        id: 8,\n        name: \"Paulo Rodrigues\",\n        email: \"paulo.rodrigues@email.com\",\n        cellPhone: \"(81) 92222-9876\",\n        product: \"casaprimavera\",\n        interessePrincipal: \"M√≥veis sob medida\",\n        field01: \"Recife - PE\",\n        field02: \"Precisa de consultoria para m√≥veis personalizados\",\n        field03: \"CONTATO_FEITO\",\n        field04: \"Or√ßamento at√© R$ 20.000\",\n        field05: \"Urgente\",\n        field06: \"2 meses\",\n        field07: \"Cliente recorrente\",\n        createdAt: \"2024-12-08T11:45:00Z\",\n        updatedAt: \"2024-12-15T07:30:00Z\",\n        tenantId: {\n            id: 9\n        }\n    },\n    {\n        id: 9,\n        name: \"Camila Almeida\",\n        email: \"camila.almeida@outlook.com\",\n        cellPhone: \"(51) 91111-4567\",\n        product: \"casaprimavera\",\n        interessePrincipal: \"Banheiro planejado\",\n        field01: \"Porto Alegre - RS\",\n        field02: \"Quer reformar banheiros da casa com m√≥veis planejados\",\n        field03: \"PROPOSTA\",\n        field04: \"Or√ßamento at√© R$ 18.000\",\n        field05: \"Flex√≠vel\",\n        field06: \"5 meses\",\n        field07: \"Primeiro contato\",\n        createdAt: \"2024-12-07T13:10:00Z\",\n        updatedAt: \"2024-12-14T12:50:00Z\",\n        tenantId: {\n            id: 9\n        }\n    },\n    {\n        id: 10,\n        name: \"Diego Martins\",\n        email: \"diego.martins@gmail.com\",\n        cellPhone: \"(92) 90000-8901\",\n        product: \"casaprimavera\",\n        interessePrincipal: \"Home office\",\n        field01: \"Manaus - AM\",\n        field02: \"Interessado em m√≥veis premium para escrit√≥rio em casa\",\n        field03: \"FECHADO\",\n        field04: \"Or√ßamento at√© R$ 10.000\",\n        field05: \"Urgente\",\n        field06: \"1 meses\",\n        field07: \"Cliente recorrente\",\n        createdAt: \"2024-12-06T17:25:00Z\",\n        updatedAt: \"2024-12-15T14:20:00Z\",\n        tenantId: {\n            id: 9\n        }\n    }\n];\n// Fun√ß√£o simples para buscar todos os leads\nfunction getMockLeads() {\n    return MOCK_LEADS;\n}\n// Fun√ß√£o para buscar lead por ID\nfunction getMockLeadById(id) {\n    return MOCK_LEADS.find((lead)=>lead.id === id);\n}\n// Vari√°vel para controlar se est√° usando mock (simples)\nlet USE_MOCK = true;\n// Fun√ß√£o para ativar mock\nfunction enableMock() {\n    USE_MOCK = true;\n    console.log(\"üé≠ Mock ativado - usando dados simulados\");\n}\n// Fun√ß√£o para desativar mock  \nfunction disableMock() {\n    USE_MOCK = false;\n    console.log(\"üåê Mock desativado - usando API real\");\n}\n// Status dispon√≠veis no sistema\nconst STATUS_OPTIONS = [\n    \"NOVO\",\n    \"CONTATO_FEITO\",\n    \"QUALIFICADO\",\n    \"N√ÉO_QUALIFICADO\",\n    \"QUALIFICADO_OP\",\n    \"PROPOSTA\",\n    \"FECHADO\"\n];\n// Interesses principais\nconst INTERESSES = [\n    \"Vestidos de festa\",\n    \"Roupas casuais\",\n    \"Uniformes corporativos\",\n    \"Roupas infantis\",\n    \"Lingerie\",\n    \"Moda praia\",\n    \"Acess√≥rios\",\n    \"Customiza√ß√£o\"\n];\n// Cidades para variar os dados\nconst CIDADES = [\n    \"S√£o Paulo - SP\",\n    \"Rio de Janeiro - RJ\",\n    \"Belo Horizonte - MG\",\n    \"Salvador - BA\",\n    \"Fortaleza - CE\",\n    \"Bras√≠lia - DF\",\n    \"Curitiba - PR\",\n    \"Recife - PE\",\n    \"Porto Alegre - RS\",\n    \"Manaus - AM\"\n];\n// Fun√ß√£o para gerar dados mockados\nfunction generateMockData() {\n    let count = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 50;\n    const mockData = [];\n    for(let i = 1; i <= count; i++){\n        const createdDate = new Date();\n        createdDate.setDate(createdDate.getDate() - Math.floor(Math.random() * 30)) // √öltimos 30 dias\n        ;\n        const updatedDate = new Date(createdDate);\n        updatedDate.setHours(updatedDate.getHours() + Math.floor(Math.random() * 48)) // At√© 48h depois\n        ;\n        const lead = {\n            id: i,\n            name: generateRandomName(),\n            email: \"cliente\".concat(i, \"@email.com\"),\n            cellPhone: generateRandomPhone(),\n            product: \"casaprimavera\",\n            interessePrincipal: INTERESSES[Math.floor(Math.random() * INTERESSES.length)],\n            field01: CIDADES[Math.floor(Math.random() * CIDADES.length)],\n            field02: generateRandomDescription(),\n            field03: STATUS_OPTIONS[Math.floor(Math.random() * STATUS_OPTIONS.length)],\n            field04: Math.random() > 0.5 ? \"Possui or√ßamento definido\" : \"Precisa de or√ßamento\",\n            field05: Math.random() > 0.5 ? \"Urgente\" : \"Flex√≠vel\",\n            field06: \"\".concat(Math.floor(Math.random() * 12) + 1, \" meses\"),\n            field07: Math.random() > 0.7 ? \"Cliente recorrente\" : \"Primeiro contato\",\n            createdAt: createdDate.toISOString(),\n            updatedAt: updatedDate.toISOString(),\n            tenantId: {\n                id: 9\n            }\n        };\n        mockData.push(lead);\n    }\n    return mockData;\n}\n// Nomes aleat√≥rios para os leads\nconst NOMES = [\n    \"Ana Silva\",\n    \"Carlos Santos\",\n    \"Maria Oliveira\",\n    \"Jo√£o Pereira\",\n    \"Fernanda Costa\",\n    \"Ricardo Lima\",\n    \"Juliana Ferreira\",\n    \"Paulo Rodrigues\",\n    \"Camila Almeida\",\n    \"Diego Martins\",\n    \"Larissa Barbosa\",\n    \"Rafael Gomes\",\n    \"Beatriz Nascimento\",\n    \"Lucas Carvalho\",\n    \"Gabriela Souza\",\n    \"Thiago Ribeiro\",\n    \"Vanessa Dias\",\n    \"Bruno Moreira\",\n    \"Patr√≠cia Cardoso\",\n    \"Marcelo Teixeira\",\n    \"Aline Correia\",\n    \"Gustavo Pinto\",\n    \"Priscila Rocha\",\n    \"Andr√© Monteiro\",\n    \"Carolina Farias\",\n    \"Felipe Ara√∫jo\",\n    \"Renata Castro\",\n    \"Rodrigo Mendes\",\n    \"Isabela Ramos\",\n    \"Leonardo Vieira\"\n];\nfunction generateRandomName() {\n    return NOMES[Math.floor(Math.random() * NOMES.length)];\n}\nfunction generateRandomPhone() {\n    const ddd = Math.floor(Math.random() * 89) + 11 // DDD de 11 a 99\n    ;\n    const numero = Math.floor(Math.random() * 900000000) + 100000000 // 9 d√≠gitos\n    ;\n    return \"(\".concat(ddd, \") \").concat(String(numero).slice(0, 5), \"-\").concat(String(numero).slice(5));\n}\nfunction generateRandomDescription() {\n    const descricoes = [\n        \"Interessado em m√≥veis planejados para sala\",\n        \"Precisa renovar cozinha com m√≥veis modernos\",\n        \"Quer decorar quarto de casal completo\",\n        \"Interessado em m√≥veis sob medida\",\n        \"Precisa de m√≥veis para √°rea externa\",\n        \"Quer conhecer cat√°logo completo de decora√ß√£o\",\n        \"Interessado em promo√ß√µes de m√≥veis\",\n        \"Precisa de consultoria em design de interiores\",\n        \"Quer fazer reforma completa da casa\",\n        \"Interessado em linha premium de m√≥veis\",\n        \"Busca m√≥veis para home office planejado\",\n        \"Precisa decorar quarto infantil tem√°tico\",\n        \"Quer m√≥veis para escrit√≥rio corporativo\",\n        \"Interessado em banheiro planejado moderno\"\n    ];\n    return descricoes[Math.floor(Math.random() * descricoes.length)];\n}\n// Classe para gerenciar os dados mockados\nclass MockDataManager {\n    static getInstance() {\n        if (!MockDataManager.instance) {\n            MockDataManager.instance = new MockDataManager();\n        }\n        return MockDataManager.instance;\n    }\n    enableMock() {\n        this.isUsingMock = true;\n        console.log(\"üé≠ Modo Mock ativado - Usando dados simulados\");\n    }\n    disableMock() {\n        this.isUsingMock = false;\n        console.log(\"üåê Modo Mock desativado - Usando API real\");\n    }\n    isMockEnabled() {\n        return this.isUsingMock;\n    }\n    // Simular GET /data/{tenantId}/{product}\n    async fetchLeads(tenantId, product) {\n        if (!this.isUsingMock) {\n            throw new Error(\"Mock n√£o est√° habilitado\");\n        }\n        // Simular delay da API\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n        return this.data.filter((lead)=>{\n            var _lead_tenantId;\n            return ((_lead_tenantId = lead.tenantId) === null || _lead_tenantId === void 0 ? void 0 : _lead_tenantId.id) === parseInt(tenantId) && lead.product === product;\n        });\n    }\n    // Simular POST /send\n    async createLead(leadData) {\n        if (!this.isUsingMock) {\n            throw new Error(\"Mock n√£o est√° habilitado\");\n        }\n        await new Promise((resolve)=>setTimeout(resolve, 300));\n        const newLead = {\n            id: Math.max(...this.data.map((l)=>l.id)) + 1,\n            name: leadData.name || \"\",\n            email: leadData.email || \"\",\n            cellPhone: leadData.cellPhone || \"\",\n            product: leadData.product || \"casaprimavera\",\n            interessePrincipal: leadData.interessePrincipal || \"\",\n            field01: leadData.field01 || \"\",\n            field02: leadData.field02 || \"\",\n            field03: leadData.field03 || \"NOVO\",\n            field04: leadData.field04 || \"\",\n            field05: leadData.field05 || \"\",\n            field06: leadData.field06 || \"\",\n            field07: leadData.field07 || \"\",\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            tenantId: leadData.tenantId || {\n                id: 9\n            }\n        };\n        this.data.push(newLead);\n        return newLead;\n    }\n    // Simular PUT /update/{id}\n    async updateLead(id, updates) {\n        if (!this.isUsingMock) {\n            throw new Error(\"Mock n√£o est√° habilitado\");\n        }\n        await new Promise((resolve)=>setTimeout(resolve, 300));\n        const leadIndex = this.data.findIndex((lead)=>lead.id === id);\n        if (leadIndex === -1) {\n            throw new Error(\"Lead n√£o encontrado\");\n        }\n        this.data[leadIndex] = {\n            ...this.data[leadIndex],\n            ...updates,\n            updatedAt: new Date().toISOString()\n        };\n        return this.data[leadIndex];\n    }\n    // Buscar lead por ID\n    async getLeadById(id) {\n        if (!this.isUsingMock) {\n            throw new Error(\"Mock n√£o est√° habilitado\");\n        }\n        await new Promise((resolve)=>setTimeout(resolve, 200));\n        return this.data.find((lead)=>lead.id === id) || null;\n    }\n    // Obter todos os dados (para debug)\n    getAllData() {\n        return this.data;\n    }\n    // Resetar dados\n    resetData() {\n        this.data = generateMockData();\n        console.log(\"üîÑ Dados mockados resetados\");\n    }\n    constructor(){\n        this.isUsingMock = false;\n        this.data = generateMockData();\n    }\n}\n// Inst√¢ncia global\nconst mockDataManager = MockDataManager.getInstance();\n// Fun√ß√£o de conveni√™ncia para ativar o mock automaticamente\nfunction enableMockData() {\n    mockDataManager.enableMock();\n}\n// Fun√ß√£o para for√ßar o modo mock (para debug)\nfunction forceMockMode() {\n    console.log(\"üöÄ FOR√áANDO MODO MOCK PARA DEBUG\");\n    mockDataManager.enableMock();\n    // Testar se os dados est√£o sendo gerados\n    const testData = mockDataManager.getAllData();\n    console.log(\"\\uD83D\\uDCCA Dados mockados dispon\\xedveis: \".concat(testData.length, \" leads\"));\n    console.log(\"üìù Primeiro lead:\", testData[0]);\n}\n// Fun√ß√£o para resetar e testar mocks\nasync function testMockSystem() {\n    console.log(\"üß™ TESTANDO SISTEMA DE MOCK\");\n    mockDataManager.enableMock();\n    try {\n        // Testar busca de leads\n        const leads = await mockDataManager.fetchLeads(\"9\", \"casaprimavera\");\n        console.log(\"‚úÖ fetchLeads: \".concat(leads.length, \" leads encontrados\"));\n        // Testar cria√ß√£o de lead\n        const newLead = await mockDataManager.createLead({\n            name: \"Teste Mock\",\n            email: \"teste@mock.com\",\n            cellPhone: \"(11) 99999-9999\",\n            product: \"casaprimavera\"\n        });\n        console.log(\"‚úÖ createLead: Lead criado com ID \".concat(newLead.id));\n        // Testar atualiza√ß√£o\n        const updated = await mockDataManager.updateLead(newLead.id, {\n            field03: \"QUALIFICADO\"\n        });\n        console.log(\"‚úÖ updateLead: Status atualizado para \".concat(updated.field03));\n        console.log(\"üéâ Sistema de mock funcionando perfeitamente!\");\n    } catch (error) {\n        console.error(\"‚ùå Erro no sistema de mock:\", error);\n    }\n}\n// Adicionar ao objeto window para debug no console\nif (true) {\n    window.mockDebug = {\n        force: forceMockMode,\n        test: testMockSystem,\n        enable: enableMockData,\n        getAll: ()=>mockDataManager.getAllData(),\n        reset: ()=>mockDataManager.resetData()\n    };\n    console.log(\"üõ†Ô∏è Fun√ß√µes de debug dispon√≠veis em window.mockDebug\");\n}\n// Hook para detectar se a API est√° funcionando\nasync function checkApiHealth(tenantId, product) {\n    try {\n        console.log(\"\\uD83D\\uDD0D Verificando API: https://backend-ingressar.onrender.com/metropole/v1/data/\".concat(tenantId, \"/\").concat(product));\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 3000) // Timeout de 3 segundos\n        ;\n        const response = await fetch(\"https://backend-ingressar.onrender.com/metropole/v1/data/\".concat(tenantId, \"/\").concat(product), {\n            method: 'GET',\n            signal: controller.signal,\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        });\n        clearTimeout(timeoutId);\n        console.log(\"\\uD83D\\uDCCA Status da API: \".concat(response.status));\n        // Se a resposta n√£o for ok ou estiver vazia, considerar como indispon√≠vel\n        if (!response.ok) {\n            console.log(\"‚ùå API retornou erro: \".concat(response.status, \" \").concat(response.statusText));\n            return false;\n        }\n        const data = await response.json();\n        console.log(\"‚úÖ API funcionando, \".concat(Array.isArray(data) ? data.length : 0, \" leads encontrados\"));\n        return true;\n    } catch (error) {\n        if (error instanceof Error) {\n            if (error.name === 'AbortError') {\n                console.log(\"‚è∞ API timeout - usando mock\");\n            } else {\n                console.log(\"‚ùå Erro na API:\", error.message);\n            }\n        } else {\n            console.log(\"‚ùå Erro desconhecido na API:\", error);\n        }\n        return false;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/mock-data.ts\n"));

/***/ })

});